---
  - name: Install epel repository
    dnf:
      name: epel-release
      state: present

  - name: Install packages
    dnf:
      name:
        - nginx
        - python3-devel
        - python3-pip
        - python3-virtualenv
        - git
        - npm
        - net-tools
      state: present

  - name: Put SELinux in permissive mode, logging actions that would be blocked.
    selinux:
      policy: targeted
      state: permissive  

# Установка Nginx  
  - name: Add Nginx config
    template:
      src: default.j2
      dest: /etc/nginx/sites-available/default
      owner: www-data
      group: www-data

  - name: Create Root Directory fo Nginx
    file:
      path: "{{ root }}" 
      mode: 775
      state: Directory
      owner: www-data
      group: www-data
    notify:
        - nginx restart

# Установка posgresql 

  - name: Install Posgresql
    dnf:
      name:
        - postgresql
      state: present

  - name: Start and Enable Posgresql
    systemd:
        name: posgresql
        enabled: yes
        state: started

  - name: Create database
    postgresql_db: 
        name: "{{ db_name }}" 
    become_user: postgres
    become: true

  - name: Create user
    postgresql_user: 
        db: "{{ db_name }}"
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: ALL
        state: present
        role_attr_flags: NOSUPERUSER,NOCREATEDB
    become: true
    become_user: postgres 

# Установка Django

  - name: Creates directory
    file: 
      path: "{{project_name_path}}" 
      state: directory

  - name: Install Django Framework
    pip:
      name: django
      virtualenv: "{{project_name_path}}/env"
      virtualenv_command: virtualenv
      virtualenv_python: python3

  - name: Install python library for PSQL
    pip:
      name: psycopg2
      virtualenv: "{{project_name_path}}/env"
      virtualenv_command: virtualenv
      virtualenv_python: python3

  - name: Install a django project
    command: "{{ project_name_path }}/env/bin/django-admin.py startproject {{ project_name }} chdir={{ project_name_path }}/"

  - name: Create Settings File for Django
    template: src=settings.py.j2 dest={{ project_name_path }}/{{ project_name }}/{{ project_name }}/settings.py

  - name: Make migrations
    shell: "{{project_name_path}}/env/bin/python3 {{ project_name_path }}/{{ project_name }}/manage.py makemigrations"

  - name: Migrate database
    django_manage: app_path={{ project_name_path }}/{{ project_name }}
                        command=migrate
                        virtualenv={{project_name_path}}/env

  - name: Get all static files
    django_manage: app_path={{ project_name_path }}/{{ project_name }}
                        command=collectstatic
                        virtualenv={{project_name_path}}/env 
# Install Gunicorn WSGI service

  - name: Install Gunicorn
    pip:
      name: gunicorn
      virtualenv: "{{project_name_path}}/env"
      virtualenv_command: virtualenv
      virtualenv_python: python3

  - name: Create Gunicorn Socket file
    template: 
      src: gunicorn.socket.j2 
      dest: /etc/systemd/system/gunicorn.socket

  - name: Create Gunicorn Service file
    template: 
      src: gunicorn.service.j2 
      dest: /etc/systemd/system/gunicorn.service 

  - name: Start Gunicorn.socket
    shell: "/bin/systemctl start gunicorn.socket"

  - name: Enable Gunicorn.socket
    shell: "/bin/systemctl enable gunicorn.socket" 

